// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  userPage UserPage?
}

model UserPage {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectCardsStyle     PROJECT_CARD_STYLE      @default(HORIZONTAL)
  socialMediaLinksStyle SOCIAL_MEDIA_LINK_STYLE @default(FILL)
  backgroundStyle       BACKGROUND_STYLE        @default(RUBY)

  biography        String?           @db.Text
  location         String?
  contactEmail     String?
  projects         Project[]
  socialMediaLinks SocialMediaLink[]
}

model Project {
  id          String   @id @default(cuid())
  userPage    UserPage @relation(fields: [userPageId], references: [id], onDelete: Cascade)
  userPageId  String
  image       String?
  name        String
  description String?  @db.Text
  url         String?
  index       Int      @default(0)
  revenue     Float?   @default(0)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  status   ProjectStatus? @relation(fields: [statusId], references: [id])
  statusId String?
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  projects Project[]
}

model ProjectStatus {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  projects Project[]
}

model SocialMediaLink {
  id         String   @id @default(cuid())
  userPage   UserPage @relation(fields: [userPageId], references: [id], onDelete: Cascade)
  userPageId String
  type       String
  username   String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum PROJECT_CARD_STYLE {
  HORIZONTAL
  BIG_IMAGE
  VERTICAL
}

enum SOCIAL_MEDIA_LINK_STYLE {
  FILL
  LINE
  GHOST
}

enum BACKGROUND_STYLE {
  RUBY
  HONEY
  SKY
  MINT
  PANSY
  PLUM
}
